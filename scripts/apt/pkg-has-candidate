#! /bin/bash

vsr_root="${BASH_SOURCE%/*}/../.."
source "$vsr_root/scripts/prelude"

function showHelp() {
  errcho "usage: pkg-has-candidate [opts] [pkg-name]"
  errcho ""
  errcho "  pkg-check <pkg> will return true (0) if there is"
  errcho "  a candidate version for <pkg> to be installed"
  errcho "  within apt."
  errcho ""
  errcho "  If given a file name will return true if all the"
  errcho "  packages are available."
  errcho ""
  errcho "  If no file or no package name has been given, read from"
  errcho "  stdin."
  errcho ""
  errcho ""
  errcho "  -v  --verbose      chatty output on stderr."
  errcho "  -h  --help         this screen."
  errcho "  -f  --file         filename to read from."
  errcho ""
}

# Checks if a package has a candidate for installation.
# Returns 1 if it has.
function checkOne() {
  if [[ $# -ne 1 ]]; then return 0; fi
  
  res=$(apt-cache policy "$1" | grep "Candidate:")
  if [[ -z $res ]]; then
    log-if "$verb" "No"
    return 1
  else
    log-if "$verb" "Yes"
    return 0
  fi
}


verb=0
filemode=0
tgt=""
while [[ $# -gt 0 ]]; do
  key=$1
  shift
  case $key in
    -v|--verbose)
      verb=1
    ;;
    
    -f|--file)
      filemode=1
    ;;

    [^-]*)
      tgt="$key"
      if [[ $# -ne 0 ]]; then
        showHelp
        exit 1
      fi
    ;;

    *)
      showHelp
      exit 1
    ;;
  esac
done

if [[ $filemode -eq 0 ]] && [[ ! -z $tgt ]]; then
  log-if "$verb" "Checking if $tgt has a candidate"
  checkOne "$tgt"
else
  tgt="${tgt:-/dev/stdin}"
  log-if "$verb" "Running in file-mode, reading from $tgt"

  # Using a while in a pipe creates a subshell, hence, it is
  # nasty to return a useful value out of this loop.
  #
  # The workaround is to echo the result out of the subshell and
  # capture it in a variable.
  res=$(vsr util uncomment | (flag=0; while read line; do
    if checkOne "$line"; then continue; else
      log-if "$verb" "Package $line has no candidate."
      flag=1
    fi    
  done; echo $flag)) < "$tgt"

  exit "$res"
fi
